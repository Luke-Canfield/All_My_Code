        -:    0:Source:mintf.c
        -:    0:Graph:mintf.gcno
        -:    0:Data:mintf.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdarg.h>
        -:    4:#include <stdbool.h>
        -:    5:#include <assert.h>
        -:    6:#include "mintf.h"
        -:    7:
       16:    8:void mintf(const char *format, ...) {
        -:    9:	va_list more_args;
       16:   10:	va_start(more_args, format);
       16:   11:	int i = 0;
        -:   12:
      426:   13:	while(*format != '\0') {
      410:   14:		if((format[i] == '%') & (format[i + 1] == 'd')) {
        4:   15:			int next_num = va_arg(more_args, int);
        4:   16:			print_integer(next_num, 10, "");
        4:   17:			format++;
        -:   18:		}
      406:   19:		else if((format[i] == '%') & (format[i + 1] == 'x')) {
        1:   20:			int next_num = va_arg(more_args, int);
        1:   21:			print_integer(next_num, 16, "0x");
        1:   22:			format++;
        -:   23:		}
      405:   24:		else if((format[i] == '%') & (format[i + 1] == 'o')) {
        1:   25:			int next_num = va_arg(more_args, int);
        1:   26:			print_integer(next_num, 8, "");
        1:   27:			format++;
        -:   28:		}
      404:   29:		else if((format[i] == '%') & (format[i + 1] == 'b')) {
        1:   30:			int next_num = va_arg(more_args, int);
        1:   31:			print_integer(next_num, 2, "0b");
        1:   32:			format++;
        -:   33:		}
      403:   34:		else if((format[i] == '%') & (format[i + 1] == 's')) {
        1:   35:			char* next_num = va_arg(more_args, char*);
        1:   36:			fputc(*next_num, stdout);
        1:   37:			format++;
        -:   38:		}
      402:   39:		else if((format[i] == '%') & (format[i + 1] == '%')) {
        1:   40:			fputc('%', stdout);
        1:   41:			format++;
        -:   42:		}
      401:   43:		else if((format[i] == '%') & (format[i + 1] == '$')) {
        7:   44:			int next_num = va_arg(more_args, int);
        7:   45:			print_integer(next_num, 10, "$");
        7:   46:			format++;
        -:   47:		}
        -:   48:		else {
      394:   49:			fputc(*format, stdout);
        -:   50:		}
      410:   51:		format++;
        -:   52:	}
        -:   53:
       16:   54:	va_end(more_args);
        -:   55:
       16:   56:	return;
        -:   57:}
        -:   58:
       21:   59:void print_integer(int n, int radix, char* prefix) {
        -:   60:	int remainder; //remainder of number after divided by radix
       21:   61:	int index = 0; //iteration for how many times number needes to be divided
       21:   62:	int duplicate_n = n; //duplication of the number to make calculations easier
       21:   63:	bool x = false; //control variable on when to print remainder
        -:   64:
       21:   65:	 if(*prefix == '$') { 
        7:   66:		int cents = n % 100;
        7:   67:		n = n / 100;
        7:   68:        if(abs(n) < 10) {
        5:   69:			if(cents <= 0) {
        3:   70:				fputc('-', stdout);
        3:   71:				cents = cents * -1;
        3:   72:				n = n * -1;
        6:   73:				for(int idx_prefix = 0; prefix[idx_prefix] != '\0'; idx_prefix++) {
        3:   74:			 		fputc(prefix[idx_prefix], stdout);
        -:   75:				}
        3:   76:		    	fputc('0' + n, stdout);	
        -:   77:				}
        -:   78:			else {
        4:   79:				for(int idx_prefix = 0; prefix[idx_prefix] != '\0'; idx_prefix++) {
        2:   80:			 		fputc(prefix[idx_prefix], stdout);
        -:   81:				}
        2:   82:				fputc('0' + n, stdout);
        -:   83:			}
        5:   84:			fputc('.', stdout);
        5:   85:			if (cents < 10) {
        2:   86:				fputc('0', stdout);
        -:   87:			}
        5:   88:			print_integer(cents, 10, "");
        -:   89:	 	}
        -:   90:		else {
        2:   91:			if(duplicate_n < 0) {
    #####:   92:				duplicate_n = duplicate_n * -1;
    #####:   93:				n = n * -1;
    #####:   94:				fputc('-', stdout);
        -:   95:			}
        4:   96:			for(int idx_prefix = 0; prefix[idx_prefix] != '\0'; idx_prefix++) {
        2:   97:				 fputc(prefix[idx_prefix], stdout); 
        -:   98:			}
       19:   99:			while(duplicate_n != 0) {
       17:  100:				duplicate_n = duplicate_n / radix;
       17:  101:				index++;
        -:  102:			}
       19:  103:			for(int k = index - 1; k > -1; k--) {
       17:  104:				duplicate_n = n;
       83:  105:				for(int j = k; j > 0; j--) {
       66:  106:					duplicate_n = duplicate_n / radix;
        -:  107:				}
       17:  108:				remainder = duplicate_n % radix;
       17:  109:				if(remainder > 0) {
       10:  110:					x = true;
        -:  111:				}
       17:  112:				if(x) {
       13:  113:					if(remainder > 9) {
    #####:  114:						remainder = remainder + 39;
    #####:  115:						fputc('0' + remainder, stdout);
        -:  116:					}
        -:  117:					else {
       13:  118:						fputc('0' + remainder, stdout);
        -:  119:					}
        -:  120:				}
        -:  121:			}
        2:  122:			fputc('.', stdout);
        2:  123:				if(cents < 10) {
        1:  124:				fputc('0', stdout);
        -:  125:			}
        2:  126:			print_integer(cents, 10, "");
        -:  127:		}
        -:  128:	}
       14:  129:	else if((n < radix) && (-n < radix)) {
        3:  130:		 if(n < 0) {
    #####:  131:			 n = n * -1;
    #####:  132:			 fputc('-', stdout);
    #####:  133:			 for(int idx_prefix = 0; prefix[idx_prefix] != '\0'; idx_prefix++) {
    #####:  134:			 	fputc(prefix[idx_prefix], stdout); 
        -:  135:			 }
        -:  136:		 }
        6:  137:			 if(n > 9) {
    #####:  138:				n = n + 39;
    #####:  139:			 	fputc('0' + n, stdout);
        -:  140:		 	 }
        -:  141:		 else {
        3:  142:			 if(n > 9) {
    #####:  143:				n = n + 39;
        -:  144:			 }
        3:  145:		 	fputc('0' + n, stdout);	
        -:  146:			 
        -:  147:		 }
        -:  148:	 }
        -:  149:	 else {
       11:  150:		 if(duplicate_n < 0) {
        3:  151:			duplicate_n = duplicate_n * -1;
        3:  152:			n = n * -1;
        3:  153:			fputc('-', stdout);
        -:  154:		}
       15:  155:		for(int idx_prefix = 0; prefix[idx_prefix] != '\0'; idx_prefix++) {
        4:  156:			 fputc(prefix[idx_prefix], stdout); 
        -:  157:		}
       53:  158:		while(duplicate_n != 0) {
       42:  159:			duplicate_n = duplicate_n / radix;
       42:  160:			index++;
        -:  161:		}
       53:  162:		for(int k = index - 1; k > -1; k--) {
       42:  163:			duplicate_n = n;
      153:  164:			for(int j = k; j > 0; j--) {
      111:  165:				duplicate_n = duplicate_n / radix;
        -:  166:			}
       42:  167:			remainder = duplicate_n % radix;
       42:  168:			if(remainder > 0) {
       33:  169:				x = true;
        -:  170:			}
       42:  171:			if(x) {
       42:  172:				if(remainder > 9) {
        1:  173:					remainder = remainder + 39;
        1:  174:					fputc('0' + remainder, stdout);
        -:  175:				}
        -:  176:				else {
       41:  177:					fputc('0' + remainder, stdout);
        -:  178:				}
        -:  179:			}
        -:  180:		}
        -:  181:	}
        -:  182:
       21:  183:	return;
        -:  184:}
        -:  185:
        -:  186:/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
